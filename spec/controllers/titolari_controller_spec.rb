require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TitolariController, type: :controller do

  #titolare non loggato vuole vedere profilo -> NO
  it "should redirect login page" do
    titolare = createTitolare("mario","rossi")
    get :show, id: titolare.id
    expect(response).to_not render_template :show
  end

  #titolare loggato vuole vedere profilo -> SI
  it "should redirect profile" do
    titolare = createTitolare("mario","rossi")
    sign_in titolare
    get :show, id: titolare.id
    expect(response).to render_template :show
  end

  #titolare loggato vuole fare edit -> SI
  it "should edit titolare" do
    titolare = createTitolare("mario","rossi")
    sign_in titolare
    get :edit, id: titolare.id
    expect(response).to render_template :edit
  end
  #titolare non loggato vuole fare edit -> NO
  it "should not edit titolare" do
    titolare = createTitolare("mario","rossi")
    get :edit, id: titolare.id
    expect(response).to_not render_template :edit
  end
  #titolare loggato vuole fare edit di un altro titolare -> NO
  it "should not edit another titolare from this titolare" do
    titolare1 = createTitolare("mario","rossi")
    titolare2 = createTitolare("mario","bianchi")
    sign_in titolare1
    get :edit, id: titolare2.id
    expect(response).to_not render_template :edit
  end

  #titolare loggato vuole fare show di un altro titolare -> NO
  it "should not edit another titolare from this titolare" do
    titolare1 = createTitolare("mario","rossi")
    titolare2 = createTitolare("mario","bianchi")
    sign_in titolare1
    get :show, id: titolare2.id
    expect(response).to_not render_template :show
  end

end
